class Solution {
    public int minimumScore(int[] nums, int[][] edges) {
        int n = nums.length;
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) adj.add(new ArrayList<>());
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }

        int[] xor = new int[n], parent = new int[n], depth = new int[n];
        Arrays.fill(parent, -1);
        
        dfs(0, -1, adj, nums, xor, parent, depth);
        int totalXor = xor[0], minScore = Integer.MAX_VALUE;

        for (int i = 0; i < edges.length; i++) {
            for (int j = i + 1; j < edges.length; j++) {
                int[] e1 = edges[i], e2 = edges[j];
                int v1 = (depth[e1[0]] > depth[e1[1]]) ? e1[0] : e1[1];
                int v2 = (depth[e2[0]] > depth[e2[1]]) ? e2[0] : e2[1];
                
                int x1, x2, x3;
                if (isAncestor(v1, v2, parent)) {
                    x1 = xor[v2];
                    x2 = xor[v1] ^ x1;
                    x3 = totalXor ^ xor[v1];
                } else if (isAncestor(v2, v1, parent)) {
                    x1 = xor[v1];
                    x2 = xor[v2] ^ x1;
                    x3 = totalXor ^ xor[v2];
                } else {
                    x1 = xor[v1];
                    x2 = xor[v2];
                    x3 = totalXor ^ x1 ^ x2;
                }
                
                int score = Math.max(x1, Math.max(x2, x3)) - Math.min(x1, Math.min(x2, x3));
                minScore = Math.min(minScore, score);
            }
        }
        return minScore;
    }

    private void dfs(int u, int p, List<List<Integer>> adj, int[] nums, int[] xor, int[] parent, int[] depth) {
        parent[u] = p;
        xor[u] = nums[u];
        depth[u] = p == -1 ? 0 : depth[p] + 1;
        for (int v : adj.get(u)) if (v != p) {
            dfs(v, u, adj, nums, xor, parent, depth);
            xor[u] ^= xor[v];
        }
    }

    private boolean isAncestor(int a, int b, int[] parent) {
        while (b != -1 && b != a) b = parent[b];
        return b == a;
    }
}

Explanaton : 1]. Let's say we have a tree with nums = [5, 2, 4, 1] and edges = [[0, 1], [0, 2], [1, 3]]. Here's a step-by-step walkthrough:

Create Adjacency List:

adj = [[1, 2], [0, 3], [0], [1]]

DFS (from node 0):

Node (u)	Parent (p)	nums[u]	xor[u] (before)	Neighbors	xor[u] (after)	depth[u]
0	-1	5	5	1, 2	5 ^ 3 ^ 4 = 2	0
1	0	2	2	0, 3	2 ^ 1 = 3	1
3	1	1	1	1	1	2
2	0	4	4	0	4	1
Main Loop (removing edges):

The code iterates through all possible pairs of edges.
For each pair, it calculates x1, x2, and x3 based on whether one node is an ancestor of the other.
It finds the score (max XOR - min XOR) and updates minScore.
2]. Time and Space Complexity
Time Complexity: The DFS part is O(N). The main loop iterates through all pairs of edges, which is O(E^2) where E is the number of edges. Since it's a tree, E is O(N). The isAncestor function takes O(N) in worst case. So, overall it's O(N^3). Imagine checking every possible pair of students in a class to see if they share a secret handshake. It takes a while!
Space Complexity: O(N) for the adjacency list, XOR array, parent array, and depth array. Like storing a phone book with contacts for each person in the tree.
3]. Actions
Build the Tree: Create an adjacency list to represent the connections between nodes.
DFS Magic: Traverse the tree using DFS to calculate XOR values for each node, determine parent nodes, and find the depth of each node.
Edge Removal Party: Loop through all possible pairs of edges to remove.
XOR Calculation: Calculate the XOR values for the three resulting parts of the tree.
Score Time: Calculate the "score" (difference between max and min XOR values) and find the minimum score among all possible edge removals.
